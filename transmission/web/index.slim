doctype html
html
  meta charset='utf-8'
  title Transmission Level Explorer
  link href='//cdn.bootcss.com/foundation/5.5.2/css/foundation.min.css' rel='stylesheet'
  script src='//cdn.bootcss.com/react/0.13.3/react-with-addons.min.js'
  script src='//cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js'
  script src='//cdn.bootcss.com/zepto/1.1.6/zepto.min.js'
  script src='transmission_solver.js'
  scss:
    .row {
      max-width: 1900px;
    }
    body {
      background: #fafafa;
    }
    .levelGraph {
      svg {
        background: #262A9A;
      }
      input {
        margin-left: 10px;
      }
    }
    .editor {
      textarea {
        font-family: Consolas,Menlo,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace,sans-serif;
        min-height: 12rem;
        font-size: 11px;
        overflow-x: auto;
        overflow-y: auto;
      }
    }
    .emControls {
      table {
        display: inline-block;
        button.tiny {
          margin: 0;
        }
      }
    }
    @keyframes dashoffsetInc {
      0% { stroke-dashoffset: 0; }
      100% { stroke-dashoffset: 0.6; }
    }
    .dashani {
      animation-iteration-count: infinite;
      animation-timing-function: linear;
      animation-duration: 3s;
      animation-name: dashoffsetInc;
    }

body

  coffee:
    class @Callbacks
      constructor: ->
        @triggerMap = {}
    
      add: (trigger, method) ->
        (@triggerMap[trigger] ||= []).push {trigger, method}
        return
    
      remove: (trigger, method) ->
        triggers = @triggerMap[trigger]
        return if !triggers
        @triggerMap[trigger] = (listener for listener in triggers when listener.method != method)
        return
    
      removeAll: (trigger) ->
        if trigger
          @triggerMap[trigger] = null
        else
          @triggerMap = {}
        return
    
      fire: (trigger) ->
        return if !@triggerMap[trigger]
        for listener in @triggerMap[trigger]
          methodArguments = [] # Array.prototype.slice(arguments) won't work in nodejs
          for argument, i in arguments
            methodArguments.push argument if i != 0
          listener.method.apply null, methodArguments
        return
    
      _instance = new @
    
      @get: -> _instance
      @add: _instance.add.bind(_instance)
      @fire: _instance.fire.bind(_instance)
      @removeAll: _instance.removeAll.bind(_instance)
      @remove: _instance.remove.bind(_instance)


    DEFAULT_LEVEL_XML = '<level>\n<element id="0" type="Transmitter" position="0,3" elementGroup="Cable" amount="1" />\n<element id="1" type="Receiver" position="0,-3" elementGroup="Cable" target="1" />\n</level>'
    levelXml = (window.localStorage || {}).levelXml || DEFAULT_LEVEL_XML
    setLevelXml = (data) ->
      return if data == levelXml
      try 
        window.localStorage.setItem 'levelXml', data
      Callbacks.fire 'setGraphState', {amounts: null, left: null, connected: null}
      if Em.out?.searches
        delete Em.out.searches
      levelXml = data
      Callbacks.fire 'levelXmlChanged', data
    XmlObserverMixin =
      getInitialState: ->
        {xml: levelXml}
      componentDidMount: ->
        Callbacks.add 'levelXmlChanged', @handleLevelXmlChange
      componentWillUnmount: ->
        Callbacks.remove 'levelXmlChanged', @handleLevelXmlChange
      handleLevelXmlChange: (xml) ->
        @setState {xml}
    GlobalUpdateObserverMixin =
      componentDidMount: ->
        Callbacks.add 'globalUpdate', @handleGlobalUpdate
      componentWillUnmount: ->
        Callbacks.remove 'globalUpdate', @handleGlobalUpdate
      handleGlobalUpdate: ->
        @forceUpdate()

    {td, tr, table, thead, th, tbody, p, input, div, textarea, input, select, option, span, g, hr, text, line, polygon, polyline, rect, circle, svg, button, h1, pre, ul, li, a, label} = React.DOM
    {sin, cos, PI} = Math

    HEX_POINTS = [[0,0]].concat([1..6].map (k) -> [- sin(PI * k / 3), - cos(PI * k / 3)])
    
    renderHexagon = (x, y, scale = 1, flip = false, fill = 'none') ->
      fi = if flip then 1 else 0
      points = [0..6].map (i) -> [x + HEX_POINTS[i][1 - fi] * scale, y + HEX_POINTS[i][fi] * scale]
      polygon points: [1, 2, 3, 4, 5, 6].map((x) -> points[x].join(',')).join(' '), fill: fill  
    
    render3DBox = (x, y, scale = 0.3, fill = 'none', fillOpacity = 0.7) ->
      points = [0..6].map (i) -> [x + HEX_POINTS[i][0] * scale, y + HEX_POINTS[i][1] * scale]
      polyline key: "#{x}#{y}", points: [1, 2, 3, 4, 5, 6, 1, 0, 5, 0, 3, 0].map((x) -> points[x].join(',')).join(' '), fill: fill, fillOpacity: fillOpacity
      
    BOXES_LAYOUTS = [
      {scale: 0, positions: []}
      {scale: 0.6, positions: [[0, 0]]}
      {scale: 0.25, positions: [[-0.3, 0], [0.3, 0]]}
      {scale: 0.23, positions: [0..2].map (x) -> [0.34 * sin(PI * x / 1.5), -0.34 * cos(PI * x / 1.5)]}
      {scale: 0.2, positions: [[0, -0.35], [-0.35, 0], [0.35, 0], [0, 0.35]]}
      {scale: 0.18, positions: [[-0.3, -0.3], [0.3, -0.3], [0, 0], [-0.3, 0.3], [0.3, 0.3]]}
    ]
    
    getColor = (eg) ->
      {Exchange: '#FAF4FB', Wave: '#FA9317', Cable: '#aaa', Fibre: '#00F9F6'}[eg]

    rid = (id) -> Em.out.ridMap[id]
    sid = (id) -> Em.out.idMap[id]

    LevelGraph = React.createFactory React.createClass
      mixins: [XmlObserverMixin, GlobalUpdateObserverMixin]

      getInitialState: ->
        {}

      componentDidMount: ->
        Callbacks.add 'setGraphState', @handleSetState

      componentWillUnmount: ->
        Callbacks.remove 'setGraphState', @handleSetState

      handleSetState: (st) ->
        @setState(st)

      parseLevelXML: (xml) ->
        try
          doc = new DOMParser().parseFromString(xml, 'text/xml')
        catch
          return {elements: []}
        elements = _.map doc.querySelectorAll('element'), (e) ->
          attrs = {}
          for attr in e.attributes
            attrs[attr.name] = attr.value
          [x, y] = attrs.position.split(',').map(parseFloat)
          _.extend attrs, {x, y: -y}
          attrs
        {elements}

      render3DBoxes: (e) ->
        fill = getColor(e.elementGroup)
        {target, amount} = e
        target = amount if amount > (target || 0)
        if @state.amounts
          amount = @state. amounts[sid(e.id)]
        return unless target > 0
        {scale, positions} = BOXES_LAYOUTS[target]
        g null,
          positions.map (pos, id) ->
            render3DBox e.x + pos[0], e.y + pos[1], scale, (id < amount) && fill

      renderDots: (cx, cy, n, r = 0.14) ->
        [1..n].map (i) ->
          circle id: i, cx: cx + i * r * 1.05, cy: cy - r * 1.05 + (i % 2) * r * 2.1, r: r

      renderLeft: (e) ->
        fill = getColor(e.elementGroup)
        left = e.amount
        if @state.left
          left = @state.left[sid(e.id)]
        return if left < 1
        cx = e.x + sin(PI / 5) * 1.3
        cy = e.y + cos(PI / 5) * 1.3 - 0.3
        g fill: fill, stroke: 'none',
          @renderDots(cx, cy, left)
      
      renderElement: (e) ->
        if e.type[0..8] == 'Objective'
          return
        
        g key: e.id, stroke: getColor(e.elementGroup), strokeWidth: 0.08, title: "#{e.id} #{e.type}", fill: '#262A9A',
          if e.type == 'Transceiver'
            circle cx: e.x, cy: e.y, r: 1
          else if e.type == 'Receiver'
            rect x: e.x - 1, y: e.y - 1, width: 2, height: 2
          else if e.type == 'RadialTransmitter'
            g strokeDasharray: '0.2,0.1', fill: 'none',
              [3,2,1].map (r) -> circle key: r, cx: e.x, cy: e.y, r: r/3
              circle cx: e.x, cy: e.y, r: e.minRadius, strokeDasharray: '0.2,0.4', strokeOpacity: 0.5, strokeWidth: 0.04
          else if e.type == 'Transmitter'
            circle cx: e.x, cy: e.y, r: 1
          else if e.type == 'SwapperTransmitter'
            g null,
              circle stroke: getColor(e.swapGroup1), cx: e.x, cy: e.y, r: 1, strokeDasharray: '0.3,0.3'
              circle stroke: getColor(e.swapGroup2), cx: e.x, cy: e.y, r: 1, strokeDasharray: '0,0.3,0.3,0'
          else if e.type == 'SignalBlock'
            line x1: e.sx, y1: e.sy, x2: e.ex, y2: e.ey, stroke: getColor(e.blockGroup), strokeWidth: 0.3, strokeOpacity: 0.5
          else if e.type == 'SignalBlockCircle'
            circle cx: e.x, cy: e.y, r: e.radius, stroke: getColor(e.blockGroup), strokeWidth: 0.3, strokeOpacity: 0.5, fill: 'none'
          else if e.type == 'CellTransmitter'
            g null,
              circle cx: e.x, cy: e.y, r: 0.4
              circle cx: e.x, cy: e.y, r: 0.2, fill: getColor(e.elementGroup)
          else if e.type == 'SignalBlockHexagon'
            g stroke: getColor(e.blockGroup), strokeOpacity: 0.5, strokeWidth: 0.3, fill:'none',
              renderHexagon(e.x, e.y, e.radius, e.flip.toLowerCase() == 'true')
          else if e.type == 'SignalBooster'
            g null,
              circle cx: e.x, cy: e.y, r: 1
              polygon points: [[e.x - 0.6, e.y - 0.4], [e.x - 0.6, e.y + 0.4], [e.x + 0.05, e.y]]
              polygon points: [[e.x + 0.05, e.y - 0.4], [e.x + 0.05, e.y + 0.4], [e.x + 0.7, e.y]]
            
          if ['SwapperTransmitter', 'Transceiver', 'Receiver'].indexOf(e.type) >= 0
            @render3DBoxes e

          if ['SwapperTransmitter', 'Transmitter', 'Transceiver', 'CellTransmitter', 'RadialTransmitter', 'SignalBooster'].indexOf(e.type) >= 0
            @renderLeft e

          if e.type.indexOf('Block') < 0 && e.type.indexOf('Objective') < 0
            text stroke: 'none', fill: 'rgba(255,255,255,0.5)', x: e.x - 0.25, y: e.y + 1.65, fontSize: 0.5, e.id
          
      renderConnected: (elements, a) ->
        e1 = _.find(elements, (e) -> "#{Em.out.idMap[e.id]}" == "#{a[0]}")
        e2 = _.find(elements, (e) -> "#{Em.out.idMap[e.id]}" == "#{a[1]}")
        n = a[2]
        return if (!e1 || !e2)
        cx = (e1.x + e2.x) / 2
        cy = (e1.y + e2.y) / 2
        g null,
          line key: "#{a}", className: 'dashani', x2: e1.x, y2: e1.y, x1: e2.x, y1: e2.y, stroke: 'white', strokeWidth: 0.05, strokeDasharray:'0.3,0.3', strokeOpacity: 0.5
          g stroke: 'none', fill: getColor(e1.elementGroup),
            @renderDots(cx, cy, n, 0.08)

      render: ->
        {elements} = @parseLevelXML(@state.xml)
        div className: 'levelGraph',
          div className: 'row',
            div className: 'large-12 columns',
              svg viewBox: "-15 -12 30 24",
                if @state.connected
                  @state.connected.map @renderConnected.bind(this, elements)
                elements.map @renderElement
    
    LEVELS = [
      ['Rob_level-1', '7-6']
      ['Rob_level-2', '7-7']
      ['Rob_level-3', '7-12']
      ['Rob_level-4', '7-11']
      ['Rob_level-5', '7-4']
      ['Rob_level-6', '7-13']
      ['Rob_level-7', '7-9']
      ['Rob_level-8', '']
      ['advanced_level1', '7-1']
      ['advanced_level2', '7-2']
      ['advanced_level3', '7-3']
      ['advanced_level4', '7-8']
      ['advanced_level5', '7-5']
      ['advanced_level6', '7-10']
      ['broadcast_level1', '4-1']
      ['broadcast_level12', '']
      ['broadcast_level13', '4-12']
      ['broadcast_level14', '4-9']
      ['broadcast_level15', '4-7']
      ['broadcast_level2a', '4-2']
      ['broadcast_level2b', '4-3']
      ['broadcast_level3', '4-4']
      ['broadcast_level4', '4-5']
      ['broadcast_level5', '4-8']
      ['broadcast_level6', '4-11']
      ['broadcast_level7', '4-10']
      ['broadcast_level8', '4-6']
      ['cell_level1', '6-1']
      ['cell_level10_swapper', '6-10']
      ['cell_level11_swapper', '6-9']
      ['cell_level12_swapper', '6-8']
      ['cell_level13_swapper', '6-11']
      ['cell_level14_swapper', '6-12']
      ['cell_level4', '6-3']
      ['cell_level5', '6-5']
      ['cell_level6', '6-4']
      ['cell_level7_swapper', '6-7']
      ['cell_level8', '6-2']
      ['cell_level9_swapper', '6-6']
      ['computer_level1', '3-1']
      ['computer_level10', '3-12']
      ['computer_level11', '3-11']
      ['computer_level12', '3-7']
      ['computer_level2', '3-2']
      ['computer_level2b', '']
      ['computer_level3', '3-3']
      ['computer_level4', '3-4']
      ['computer_level5', '3-10']
      ['computer_level6', '3-6']
      ['computer_level7', '3-5']
      ['computer_level8', '3-8']
      ['computer_level9', '3-9']
      ['intro_level1', '1']
      ['satellite_level1', '5-1']
      ['satellite_level12_swapper', '5-6']
      ['satellite_level13_swapper', '5-9']
      ['satellite_level14_swapper', '5-10']
      ['satellite_level15', '5-11']
      ['satellite_level16_swapper', '5-12']
      ['satellite_level17', '5-4']
      ['satellite_level18', '5-8']
      ['satellite_level2', '5-2']
      ['satellite_level3', '']
      ['satellite_level4_swapper', '5-3']
      ['satellite_level5_swapper', '5-5']
      ['satellite_level7_swapper', '']
      ['satellite_level9_swapper', '5-7']
      ['telegraph_level1', '1-1']
      ['telegraph_level2', '1-2']
      ['telegraph_level3', '1-3']
      ['telephone_level1', '2-1']
      ['telephone_level2', '2-2']
      ['telephone_level3', '2-3']
      ['telephone_level4', '2-4']
      ['telephone_level5', '']
      ['telephone_level6', '2-5']
      ['telephone_level7', '']
      ['telephone_level7a', '2-6' ]]

    LevelSelector = React.createFactory React.createClass
      loadLevel: ->
        e = React.findDOMNode(@refs.selector)
        path = "levels/#{e.value}.xml"
        $.ajax
          url: path
          dataType: 'text'
          success: (xml) ->
            setLevelXml(xml.replace(/scale="1,1,1" /g, '').replace(/rotation="0,0,9?0" /g, '').replace(/lookupTag="" /g, ''))
            if Em?.out?.connectable
              delete Em.out.connectable
              Callbacks.fire 'connectableChanged'
          error: (xhr, type) -> alert "Failed to load #{path}"
        
      render: ->
        div className: 'levelSelector row',
          div className: 'large-8 columns',
            select ref: 'selector',
              LEVELS.map (l) =>
                option value: l[0], "#{l[0]}#{if l[1].length then " (#{l[1]})" else ''}"
          div className: 'large-4 columns',
            button className: 'small right button', onClick: @loadLevel, 'Load'
              

    XmlEditor = React.createFactory React.createClass
      mixins: [XmlObserverMixin]

      componentDidMount: ->
        React.findDOMNode(@refs.textarea).wrap = 'off'

      handleEdit: (e) ->
        setLevelXml e.target.value

      render: ->
        div className: 'editor row',
          div className: 'large-12 columns',
            textarea ref: 'textarea', spellCheck: false, wrap: 'off', className: 'expanded', onChange: @handleEdit, value: @state.xml

    EmControls = React.createFactory React.createClass
      mixins: [XmlObserverMixin]

      getInitialState: ->
        {busy: false}

      runSolver: ->
        return if @state.busy
        @setState busy: true
        try
          v = Em.ccall('solveLevelXML', 'number', ['string'], [levelXml])
        Callbacks.fire 'globalUpdate'
        @setState busy: false

      viewStep: (state) ->
        Callbacks.fire 'setGraphState', state

      renderSearch: (s, i) ->
        table key: i,
          thead null,
            tr null,
              th colSpan: 2, className: (if s.solved then 'solved' else 'failed'), s.objective
          tbody null,
            s.steps.map (t, i) =>
              tr id: i,
                td null, "#{rid(t[0])} -> #{rid(t[1])}"
                td null,
                  button className: 'button tiny', onClick: @viewStep.bind(this, s.states[i]), 'View'

      render: ->
        div className: 'row emControls',
          div className: 'large-12 columns',
            div className: 'row',
              div className: 'large-12 columns',
                button className: 'small button right', disabled: @state.busy, onClick: @runSolver, 'Solve'
            if !@state.busy
              div className: 'row',
                div className: 'large-12 columns',
                  (Em.out?.searches || []).map @renderSearch

    App = React.createFactory React.createClass
      render: ->
        div null,
          div className: 'row',
            div className: 'large-12 columns',
              h1 null, document.title
          div className: 'row',
            div className: 'large-7 columns',
              LevelGraph()
            div className: 'large-5 columns',
              LevelSelector()
              XmlEditor()
              EmControls()
    
    document.addEventListener 'DOMContentLoaded', ->
      React.render App(), document.body
